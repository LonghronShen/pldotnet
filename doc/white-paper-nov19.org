#+TITLE: Adding .NET support to PostgreSQL
#+AUTHOR: Brick Abode
#+DATE: Thu Nov  7 11:02:10 -03 2019

* Introduction

PostgreSQL[fn:1] (also "Postgres") is a leading open-source relational
database.  Postgres allows user functions to be written in C[fn:2]
(the implementation language) and SQL[fn:3] (the native language of
the database itself), but it also allows user-defined functions to be
written in other languages, generically called Procedural Languages[fn:4].
These languages currently include Tcl[fn:5], Perl[fn:6], and Python[fn:7]
in the main distribution, and Java[fn:8], Ruby[fn:9], Lua[fn:10],
R[fn:11], Javascript[fn:12], and Unix shell[fn:13], hosted outside of
the main distribution.

We have added Microsoft's .NET framework to PostgreSQL.  Both
PostgreSQL[fn:50] and .NET Core[fn:55] are available under Berkeley-style
licenses, and so is our work.

Our work is preliminary, and it is going very well.  We have made an
initial, alpha-quality release, along with this white paper, in order
to spread awareness and seek feedback on the project.  We anticipate
making our first full release in January of 2020.

We will fully support both the C#[fn:60] and F#[fn:63] languages, and support for
other .NET languages such as Visual Basic[fn:66] should be straightforward if
interest arises.

This paper describes our motivation for the project, the initial feature
set of both this Alpha release as well as version 1, our experience
thus far, and our future plans, including our hopes of cooperating
with other PostgreSQL Procedural Language implementations.

* Motivation

We at Brick Abode love strongly-typed functional programming, and we are
commercial software developers.  We have embraced .NET as a platform
because it combines a powerful application development environment
(especially ASP.NET and related web-based application solutions) with
a powerful, typed functional programming language, F#.

We build most of our internal applications on F#, and we use it for some
client project as well, where appropriate.  We also do a great deal of
C# development for clients.

We also are heavy users of PostgreSQL.  Members of our team have
previously done heavy work on the internals of the database, and it
has played a central role in our creation of highly-secured financial
applications.

As part of that security work, we have wished for the ability to move
certain functionality from the application to the database, and having
C# and F# as PostgreSQL Procedural Languages will make that possible.
We then can tightly restrict database access to the main part of the code,
significantly reducing the danger of any security intrusions that might
occur there.  (This is part of a broader architecture of multi-layered
security protections.)

Securing this particular application was our original motivation, but
as we explored the idea, we grew more enthusiasm for the project for
other reasons as well:

    1) Move computation to data
        + requires SDLC support
        + creates SDLC possibilities!
    1) Security
        + tied to SDLC
    1) Functional database programming
        + we want OCaml with good threading and a strong library
        + hey, look, we have it!  It's called F#!
        + A good ML, ML types, strong system library, amazing runtime
        + relational databases are already fairly functional-friendly environments, and now we can explore further in that direction

* Initial feature set

Because we are making this preliminary release of the software, the
initial features are broken into two sets: those which are currently
working, and those which are currently underway and will be working in
version 1.  We describe them separately.

** Current (Alpha) Implementation

*** Data types and "System.Nullable"

We currently have working and tested booleans, integers, floating point
numbers, and text.  We also have mapped each of these types to the
"nullable" construct in C# ("System.Nullable<T>" in .NET.)  We will
describe each of these in turn.

    - base types:
        + booleans
        + numerics (int & float)
        + strings
    - nullable types

*** Compilation

    - compiler and Roslyn
    - functions and DO

*** Languages

    - C#: full; F#: proof-of-concept

** Imminent, Version 1 Implementation

*** Structures ("Composites" in PostgreSQL)

"A composite type represents the structure of a row or record; it is
essentially just a list of field names and their data types. PostgreSQL
allows composite types to be used in many of the same ways that simple
types can be used. For example, a column of a table can be declared to
be of a composite type."

*** Arrays
*** SPI
*** Full F# support
*** Testing

* Our experience thusfar

    - nullable
    - unicode
    - memory
    - compilation
    - security

* Future Plans

** PostgreSQL features

    - other data types: 
        + binary
        + datetime
        + timezone
        + json
        + range
        + geometry
        + internet
        + bitstring
    - security
    - triggers
    - exoterica
        + careful examination of function attributes
        + giving access to expression parse tree
        + exotic SPI

** Exploring more of the relevant .NET universe

    - SQL Server/CLR integration
        + [[https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/introduction-to-sql-server-clr-integration]]
        + our intention is to generally be good .NET citizens and follow SQL Server's lead
    - Entity Framework
    - Linq
    - ADO.NET

** Cross-PL community

    - cross-PL test suite
    - guide for future PL authors

* Conclusions

[fn:1] [[https://www.postgresql.org/docs/current/index.html]]
[fn:2] [[https://www.postgresql.org/docs/current/plpgsql.html]]
[fn:3] [[https://www.postgresql.org/docs/current/xfunc-c.html]]
[fn:4] [[https://www.postgresql.org/docs/current/plhandler.html]]
[fn:5] [[https://www.postgresql.org/docs/current/pltcl.html]]
[fn:6] [[https://www.postgresql.org/docs/current/plperl.html]]
[fn:7] [[https://www.postgresql.org/docs/current/plpython.html]]
[fn:8] [[https://tada.github.io/pljava/]]
[fn:9] [[https://github.com/knu/postgresql-plruby]]
[fn:10] [[https://github.com/pllua/pllua]]
[fn:11] [[https://github.com/postgres-plr/plr]]
[fn:12] [[https://github.com/plv8/plv8]]
[fn:13] [[https://github.com/petere/plsh]]
[fn:50] [[https://www.postgresql.org/about/licence/]]
[fn:55] [[https://dotnet.microsoft.com/platform/free]]
[fn:60] [[https://en.wikipedia.org/wiki/C_Sharp_(programming_language)]]
[fn:63] [[https://en.wikipedia.org/wiki/F_Sharp_(programming_language)]]
[fn:66] [[https://en.wikipedia.org/wiki/Visual_Basic_.NET]]

